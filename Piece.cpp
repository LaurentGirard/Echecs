/**
* @file Piece.cpp
* @author P. Sullivan, G.Laurent
* @since 25/12/2015
* @brief implémentation des méthodes de la classe Piece
*
**/

#include "Piece.hpp"

//------------------------------------------------------------------------------------------------------
//----------------------------- CLASS PIECE ------------------------------------------------------------
//------------------------------------------------------------------------------------------------------

Piece::Piece(unsigned int x, unsigned int y) : alive(true) 
{
	square = new Cell(x,y);
}

//------------------------------------------------------------------------------------------------------
Piece::~Piece(){}

//------------------------------------------------------------------------------------------------------
Cell* Piece::getSquare()
{
	return square;
}

//------------------------------------------------------------------------------------------------------
void Piece::setSquare(Cell* newCell)
{
	square->setX(newCell->getX());
	square->setY(newCell->getY());
}

//------------------------------------------------------------------------------------------------------
bool Piece::asAlive()
{
	return alive;
}

//------------------------------------------------------------------------------------------------------
void Piece::setAlive(bool newAlive)
{
	alive = newAlive;
}
//------------------------------------------------------------------------------------------------------
void Piece::printPiece()
{
	std::cout << "X position : " << square->getX() << std::endl;
	std::cout << "Y position : " << square->getY() << std::endl;
}

//------------------------------------------------------------------------------------------------------
//----------------------------- CLASS SPAWN -------------------------------------------------------------
//------------------------------------------------------------------------------------------------------

Spawn::Spawn(unsigned int x, unsigned int y) : Piece(x,y) {}

//------------------------------------------------------------------------------------------------------
Spawn::~Spawn(){}

//------------------------------------------------------------------------------------------------------
void Spawn::movement()
{
	// TO DO
	// ajout sur l'attribut protected movements
}


//------------------------------------------------------------------------------------------------------
//----------------------------- CLASS ROOK -------------------------------------------------------------
//------------------------------------------------------------------------------------------------------

Rook::Rook(unsigned int x, unsigned int y) : Piece(x,y), _moved(0) {}

//------------------------------------------------------------------------------------------------------
Rook::~Rook(){}

//------------------------------------------------------------------------------------------------------
bool Rook::asMoved()
{
	return _moved;
}

//------------------------------------------------------------------------------------------------------
void Rook::setMoved(bool newMoved)
{
	_moved = newMoved;
}

//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
void Rook::movement()
{
	// TO DO
	// ajout sur l'attribut protected movements
}

//------------------------------------------------------------------------------------------------------
//----------------------------- CLASS KNIGHT -----------------------------------------------------------
//------------------------------------------------------------------------------------------------------

Knight::Knight(unsigned int x, unsigned int y) : Piece(x,y) {}

//------------------------------------------------------------------------------------------------------
Knight::~Knight(){}

//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
void Knight::movement()
{
	// TO DO
	// ajout sur l'attribut protected movements
}

//------------------------------------------------------------------------------------------------------
//----------------------------- CLASS BISHOP -----------------------------------------------------------
//------------------------------------------------------------------------------------------------------

Bishop::Bishop(unsigned int x, unsigned int y) : Piece(x,y) {}

//------------------------------------------------------------------------------------------------------
Bishop::~Bishop(){}

//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
void Bishop::movement()
{
	// TO DO
	// ajout sur l'attribut protected movements
}

//------------------------------------------------------------------------------------------------------
//----------------------------- CLASS QUEEN ------------------------------------------------------------
//------------------------------------------------------------------------------------------------------

Queen::Queen(unsigned int x, unsigned int y) : Piece(x,y) {}

//------------------------------------------------------------------------------------------------------
Queen::~Queen(){}

//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
void Queen::movement()
{
	// TO DO
	// ajout sur l'attribut protected movements
}

//------------------------------------------------------------------------------------------------------
//----------------------------- CLASS KING -------------------------------------------------------------
//------------------------------------------------------------------------------------------------------

King::King(unsigned int x, unsigned int y) : Piece(x,y), _moved(0) {}

//------------------------------------------------------------------------------------------------------
King::~King(){}

//------------------------------------------------------------------------------------------------------
bool King::asMoved()
{
	return _moved;
}

//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
void King::movement()
{
	// TO DO
	// ajout sur l'attribut protected movements
}